Object_Text="Object Text"
TS_Test_Description="TS_Test Description"
TS_Test_Goal="TS_Test Goal"
TS_Test_Priority="TS_Test Priority"
TS_Object_Type="TS_Object Type"
TS_Expected_Result="TS_Expected Result"
TS_SwArchitectureDesign="TS_SwArchitectureDesign"
TS_Test_Enviroment="TS_Test Environment"
TS_TestLocation_TC="TS_TestLocation_TC"
TS_Test_Case_Status="TS_Test Case Status"
RequirementModuleName="System and Software Requirements and Structure_DAS_SUZ_02_YEA - ENG2 ENG3 ENG4 ENG5"
currMod = "DAS_SUZ_02_YEA_SW_TST_ENG8_Test_Specification"
Module m0 = null
if (!null currMod){m0 = edit(currMod, true)}
Array ArrObjectInfor0 = create(19,12)

//Calculate Path
Project project = getParentProject(m0)
pathToRequirement = "/" name(project) "/20_SYS/" RequirementModuleName
pathToLinkModule = "/" name(project) "/Linkmodule/Verifies_DAS_SUZ_02"

//Array data
put(ArrObjectInfor0, "[16058]
IF
'Cust_LCWCAvailable_CFG' is set such that 'BSW', 'CVW' is available
AND
'SysStM_StateInfo' == 'ACTIVE'
AND
'DTC_LCWRelevantFailure' indicates no error 
AND
'Cust SystemFailureState' == 'No Failure'
THEN
'LcwRunCondition' = 'true'.
ELSE
'LcwRunCondition' = 'false'.", 0, 0)
put(ArrObjectInfor0, "Case 1: Set 'Cust_LCWCAvailable_CFG' is set such that 'BSW', 'CVW' is available
AND'SysStM_StateInfo' == 'ACTIVE'
AND'DTC_LCWRelevantFailure' indicates no error 
AND'Cust SystemFailureState' == 'No Failure'
Check if 'LcwRunCondition' = 'true'

Case 2: Set 'Cust_LCWCAvailable_CFG' is set such that 'BSW', 'CVW' is Not available
AND'SysStM_StateInfo' == 'ACTIVE'
AND'DTC_LCWRelevantFailure' indicates no error 
AND'Cust SystemFailureState' == 'No Failure'
Check if 'LcwRunCondition' = 'false'

Case 3: Set 'Cust_LCWCAvailable_CFG' is set such that 'BSW', 'CVW' is available
AND'SysStM_StateInfo' != 'ACTIVE'
AND'DTC_LCWRelevantFailure' indicates no error 
AND'Cust SystemFailureState' == 'No Failure'
Check if 'LcwRunCondition' = 'false'

Case 4: Set 'Cust_LCWCAvailable_CFG' is set such that 'BSW', 'CVW' is available
AND'SysStM_StateInfo' == 'ACTIVE'
AND'DTC_LCWRelevantFailure' indicates error 
AND'Cust SystemFailureState' == 'No Failure'
Check if 'LcwRunCondition' = 'false'

Case 5: Set 'Cust_LCWCAvailable_CFG' is set such that 'BSW', 'CVW' is available
AND'SysStM_StateInfo' == 'ACTIVE'
AND'DTC_LCWRelevantFailure' indicates no error 
AND'Cust SystemFailureState' != 'No Failure'
Check if 'LcwRunCondition' = 'false'", 0, 1)
put(ArrObjectInfor0, "Check if LcwRunCondition is calculate correctly", 0, 2)
put(ArrObjectInfor0, "medium", 0, 3)
put(ArrObjectInfor0, "Test Case", 0, 4)
put(ArrObjectInfor0, "see test automation", 0, 5)
put(ArrObjectInfor0, "ComCore", 0, 6)
put(ArrObjectInfor0, "Debugger Test", 0, 7)
put(ArrObjectInfor0, "SWT_CC", 0, 8)
put(ArrObjectInfor0, "ready for review", 0, 9)
put(ArrObjectInfor0, 2284, 0, 10)
put(ArrObjectInfor0, 16058, 0, 11)
put(ArrObjectInfor0, "[16060]
IF
'Cust_LCWCAvailable_CFG' is set such that 'BSW' and 'CVW' are not available
OR
'SysStM_StateInfo' != 'ACTIVE'
OR
'DTC_LCWRelevantFailure' indicates LCW relevant error(s)
OR
'Cust SystemFailureState' != 'No Failure'
THEN
'LcwOffEvent' = 'true'.
ELSE
'LcwOffEvent' = 'false'.", 1, 0)
put(ArrObjectInfor0, "Case 1: Set 'Cust_LCWCAvailable_CFG' is set such that 'BSW', 'CVW' is available
AND'SysStM_StateInfo' == 'ACTIVE'
AND'DTC_LCWRelevantFailure' indicates no error 
AND'Cust SystemFailureState' == 'No Failure'
Check if 'LcwOffEvent' = 'false'.

Case 2: Set 'Cust_LCWCAvailable_CFG' is set such that 'BSW', 'CVW' is Not available
AND'SysStM_StateInfo' == 'ACTIVE'
AND'DTC_LCWRelevantFailure' indicates no error 
AND'Cust SystemFailureState' == 'No Failure'
Check if 'LcwOffEvent' = 'true'

Case 3: Set 'Cust_LCWCAvailable_CFG' is set such that 'BSW', 'CVW' is available
AND'SysStM_StateInfo' != 'ACTIVE'
AND'DTC_LCWRelevantFailure' indicates no error 
AND'Cust SystemFailureState' == 'No Failure'
Check if 'LcwOffEvent' = 'true'

Case 4: Set 'Cust_LCWCAvailable_CFG' is set such that 'BSW', 'CVW' is available
AND'SysStM_StateInfo' == 'ACTIVE'
AND'DTC_LCWRelevantFailure' indicates error 
AND'Cust SystemFailureState' == 'No Failure'
Check if 'LcwOffEvent' = 'true'

Case 5: Set 'Cust_LCWCAvailable_CFG' is set such that 'BSW', 'CVW' is available
AND'SysStM_StateInfo' == 'ACTIVE'
AND'DTC_LCWRelevantFailure' indicates no error 
AND'Cust SystemFailureState' != 'No Failure'
Check if 'LcwOffEvent' = 'true'", 1, 1)
put(ArrObjectInfor0, "Check if LcwOffEvent is calculate correctly", 1, 2)
put(ArrObjectInfor0, "medium", 1, 3)
put(ArrObjectInfor0, "Test Case", 1, 4)
put(ArrObjectInfor0, "see test automation", 1, 5)
put(ArrObjectInfor0, "ComCore", 1, 6)
put(ArrObjectInfor0, "Debugger Test", 1, 7)
put(ArrObjectInfor0, "SWT_CC", 1, 8)
put(ArrObjectInfor0, "ready for review", 1, 9)
put(ArrObjectInfor0, 2285, 1, 10)
put(ArrObjectInfor0, 16060, 1, 11)
put(ArrObjectInfor0, "[16068]
IF'Cust_PersoLCWDriverRequest' == 'on' (only relevant if 'Cust_LCWCFSMSettings_CFG' == 'consider driver request')AND	//  Velocity and curve radius thresholds for BSW/CVW('Cust_LCWCEgoVehicleActivationVelocityMin_CFG' <= 'EgoVehicle_Velocity'  <=  'Cust_LCWCEgoVehicleActivationVelocityMax_CFG'AND('EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusBSWActive_CFG'OR'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusCVWActive_CFG'))AND // 'Cust_LCWCEgoVehicleGearDependency_CFG'-Passive-Bit must not be set for the current gear status'Cust_LCWCEgoVehicleGearDependency_CFG' -> bit7 is not set AND 'EgoVehicle_GearInfo' == 'drive'THEN'LcwActivationEvent' = 'true'.ELSE'LcwActivationEvent' = 'false'.", 2, 0)
put(ArrObjectInfor0, "Case 1:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'Cust_LCWCEgoVehicleActivationVelocityMin_CFG' <= 'EgoVehicle_Velocity'  <=  'Cust_LCWCEgoVehicleActivationVelocityMax_CFG'
AND 'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusBSWActive_CFG'
AND Cust_LCWCEgoVehicleGearDependency_CFG' -> bit7 is not set 
AND 'EgoVehicle_GearInfo' == 'drive'
THEN'LcwActivationEvent' = 'true'.

Case 2:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'Cust_LCWCEgoVehicleActivationVelocityMin_CFG' <= 'EgoVehicle_Velocity'  <=  'Cust_LCWCEgoVehicleActivationVelocityMax_CFG'
AND 'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusCVWActive_CFG'
AND Cust_LCWCEgoVehicleGearDependency_CFG' -> bit7 is not set 
AND 'EgoVehicle_GearInfo' == 'drive'
THEN'LcwActivationEvent' = 'true'.

Case 3:
Set 'Cust_PersoLCWDriverRequest' == 'off' 
AND	'Cust_LCWCEgoVehicleActivationVelocityMin_CFG' <= 'EgoVehicle_Velocity'  <=  'Cust_LCWCEgoVehicleActivationVelocityMax_CFG'
AND 'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusCVWActive_CFG'
AND Cust_LCWCEgoVehicleGearDependency_CFG' -> bit7 is not set 
AND 'EgoVehicle_GearInfo' == 'drive'
THEN'LcwActivationEvent' = 'false'.

Case 4:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'EgoVehicle_Velocity'  >  'Cust_LCWCEgoVehicleActivationVelocityMax_CFG'
AND 'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusCVWActive_CFG'
AND Cust_LCWCEgoVehicleGearDependency_CFG' -> bit7 is not set 
AND 'EgoVehicle_GearInfo' == 'drive'
THEN'LcwActivationEvent' = 'false'.

Case 5:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'EgoVehicle_Velocity'  < 'Cust_LCWCEgoVehicleActivationVelocityMin_CFG'
AND 'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusCVWActive_CFG'
AND Cust_LCWCEgoVehicleGearDependency_CFG' -> bit7 is not set 
AND 'EgoVehicle_GearInfo' == 'drive'
THEN'LcwActivationEvent' = 'false'.

Case 6:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'Cust_LCWCEgoVehicleActivationVelocityMin_CFG' <= 'EgoVehicle_Velocity'  <=  'Cust_LCWCEgoVehicleActivationVelocityMax_CFG'
AND 'EgoVehicle_CurveRadius' < 'Cust_LCWCEgoVehicleCurveRadiusCVWActive_CFG'
AND Cust_LCWCEgoVehicleGearDependency_CFG' -> bit7 is not set 
AND 'EgoVehicle_GearInfo' == 'drive'
THEN'LcwActivationEvent' = 'false'.

Case 7:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'Cust_LCWCEgoVehicleActivationVelocityMin_CFG' <= 'EgoVehicle_Velocity'  <=  'Cust_LCWCEgoVehicleActivationVelocityMax_CFG'
AND 'EgoVehicle_CurveRadius' < 'Cust_LCWCEgoVehicleCurveRadiusBSWActive_CFG'
AND Cust_LCWCEgoVehicleGearDependency_CFG' -> bit7 is not set 
AND 'EgoVehicle_GearInfo' == 'drive'
THEN'LcwActivationEvent' = 'false'.

Case 8:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'Cust_LCWCEgoVehicleActivationVelocityMin_CFG' <= 'EgoVehicle_Velocity'  <=  'Cust_LCWCEgoVehicleActivationVelocityMax_CFG'
AND 'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusCVWActive_CFG'
AND Cust_LCWCEgoVehicleGearDependency_CFG' -> bit7 is set 
AND 'EgoVehicle_GearInfo' == 'drive'
THEN'LcwActivationEvent' = 'false'.

Case 9:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'Cust_LCWCEgoVehicleActivationVelocityMin_CFG' <= 'EgoVehicle_Velocity'  <=  'Cust_LCWCEgoVehicleActivationVelocityMax_CFG'
AND 'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusCVWActive_CFG'
AND Cust_LCWCEgoVehicleGearDependency_CFG' -> bit7 is not set 
AND 'EgoVehicle_GearInfo' != 'drive'
THEN'LcwActivationEvent' = 'false'.", 2, 1)
put(ArrObjectInfor0, "Check if 'LcwActivationEvent' is calculate correctly", 2, 2)
put(ArrObjectInfor0, "medium", 2, 3)
put(ArrObjectInfor0, "Test Case", 2, 4)
put(ArrObjectInfor0, "see test automation", 2, 5)
put(ArrObjectInfor0, "ComCore", 2, 6)
put(ArrObjectInfor0, "Debugger Test", 2, 7)
put(ArrObjectInfor0, "SWT_CC", 2, 8)
put(ArrObjectInfor0, "ready for review", 2, 9)
put(ArrObjectInfor0, 2286, 2, 10)
put(ArrObjectInfor0, 16068, 2, 11)
put(ArrObjectInfor0, "[16083]
IF
'Cust_PersoLCWDriverRequest' == 'off' (only relevant if 'Cust_LCWCFSMSettings_CFG' == 'consider driver request')

OR
['EgoVehicle_CurveRadius'  <  'Cust_LCWCEgoVehicleCurveRadiusBSWInactive_CFG' 
OR
'EgoVehicle_Velocity' < 'Cust_LCWCEgoVehicleDeactivationVelocityMin_CFG']
AND
['EgoVehicle_CurveRadius'  <  'Cust_LCWCEgoVehicleCurveRadiusCVWInactive_CFG' 
OR
'EgoVehicle_Velocity' < 'Cust_LCWCEgoVehicleDeactivationVelocityMin_CFG']

OR
// 'Cust_LCWCEgoVehicleGearDependency_CFG'-Passive-Bit is set for the current gear status:
'Cust_LCWCEgoVehicleGearDependency_CFG'->bit5 is set AND 'EgoVehicle_GearInfo' ==  'reverse'

THEN
'LcwDeactivationEvent' = 'true'.
ELSE
'LcwDeactivationEvent' = 'false'.", 3, 0)
put(ArrObjectInfor0, "
Case 1:
Set 'Cust_PersoLCWDriverRequest' == 'off' 
THEN'LcwDeactivationEvent' = 'true'.

Case 2:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'EgoVehicle_CurveRadius'  <  'Cust_LCWCEgoVehicleCurveRadiusBSWInactive_CFG'
AND 'EgoVehicle_CurveRadius'  <  'Cust_LCWCEgoVehicleCurveRadiusCVWInactive_CFG'
THEN'LcwDeactivationEvent' = 'true'.

Case 3:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'EgoVehicle_CurveRadius'  >  'Cust_LCWCEgoVehicleCurveRadiusBSWInactive_CFG'
AND 'EgoVehicle_CurveRadius'  >  'Cust_LCWCEgoVehicleCurveRadiusCVWInactive_CFG'
AND 'EgoVehicle_Velocity' < 'Cust_LCWCEgoVehicleDeactivationVelocityMin_CFG'
THEN'LcwDeactivationEvent' = 'true'.

Case 4:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'EgoVehicle_CurveRadius'  >  'Cust_LCWCEgoVehicleCurveRadiusBSWInactive_CFG'
AND 'EgoVehicle_CurveRadius'  >  'Cust_LCWCEgoVehicleCurveRadiusCVWInactive_CFG'
AND 'EgoVehicle_Velocity' > 'Cust_LCWCEgoVehicleDeactivationVelocityMin_CFG'
AND 'Cust_LCWCEgoVehicleGearDependency_CFG'->bit5 is set 
AND 'EgoVehicle_GearInfo' ==  'reverse'
THEN'LcwDeactivationEvent' = 'true'.

Case 5:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'EgoVehicle_CurveRadius'  >  'Cust_LCWCEgoVehicleCurveRadiusBSWInactive_CFG'
AND 'EgoVehicle_CurveRadius'  >  'Cust_LCWCEgoVehicleCurveRadiusCVWInactive_CFG'
AND 'EgoVehicle_Velocity' > 'Cust_LCWCEgoVehicleDeactivationVelocityMin_CFG'
AND 'Cust_LCWCEgoVehicleGearDependency_CFG'->bit5 is set 
AND 'EgoVehicle_GearInfo' !=  'reverse'
THEN'LcwDeactivationEvent' = 'false'.

Case 6:
Set 'Cust_PersoLCWDriverRequest' == 'on' 
AND	'EgoVehicle_CurveRadius'  >  'Cust_LCWCEgoVehicleCurveRadiusBSWInactive_CFG'
AND 'EgoVehicle_CurveRadius'  >  'Cust_LCWCEgoVehicleCurveRadiusCVWInactive_CFG'
AND 'EgoVehicle_Velocity' > 'Cust_LCWCEgoVehicleDeactivationVelocityMin_CFG'
AND 'Cust_LCWCEgoVehicleGearDependency_CFG'->bit5 is not set 
AND 'EgoVehicle_GearInfo' ==  'reverse'
THEN'LcwDeactivationEvent' = 'false'.", 3, 1)
put(ArrObjectInfor0, "Check if 'LcwDeactivationEvent' is calculate correctly", 3, 2)
put(ArrObjectInfor0, "medium", 3, 3)
put(ArrObjectInfor0, "Test Case", 3, 4)
put(ArrObjectInfor0, "see test automation", 3, 5)
put(ArrObjectInfor0, "ComCore", 3, 6)
put(ArrObjectInfor0, "Debugger Test", 3, 7)
put(ArrObjectInfor0, "SWT_CC", 3, 8)
put(ArrObjectInfor0, "ready for review", 3, 9)
put(ArrObjectInfor0, 2287, 3, 10)
put(ArrObjectInfor0, 16083, 3, 11)
put(ArrObjectInfor0, "[16084]
If the function 'LcwFeatStM' is in state 'LCW_ACTIVE' it shall set 'Cust_LCWCSubStateInfo' to 'BSW active' (if it was set to 'BSW not active' before) if

'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusBSWActive_CFG'", 4, 0)
put(ArrObjectInfor0, "Case 1: Set 'BSW is not active' and 'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusBSWActive_CFG'
Check if the function 'LcwFeatStM' is in state 'LCW_ACTIVE' it shall set 'Cust_LCWCSubStateInfo' to 'BSW active'", 4, 1)
put(ArrObjectInfor0, "Check if 'Cust_LCWCSubStateInfo' is calculate correctly", 4, 2)
put(ArrObjectInfor0, "medium", 4, 3)
put(ArrObjectInfor0, "Test Case", 4, 4)
put(ArrObjectInfor0, "see test automation", 4, 5)
put(ArrObjectInfor0, "ComCore", 4, 6)
put(ArrObjectInfor0, "Debugger Test", 4, 7)
put(ArrObjectInfor0, "SWT_CC", 4, 8)
put(ArrObjectInfor0, "ready for review", 4, 9)
put(ArrObjectInfor0, 2288, 4, 10)
put(ArrObjectInfor0, 16084, 4, 11)
put(ArrObjectInfor0, "[16085]
If the function 'LcwFeatStM' is in state 'LCW_ACTIVE' it shall set 'Cust_LCWCSubStateInfo' to 'BSW not active' (if it was set to 'BSW active' before) if

'EgoVehicle_CurveRadius' < 'Cust_LCWCEgoVehicleCurveRadiusBSWInactive_CFG'", 5, 0)
put(ArrObjectInfor0, "Case 1: Set 'BSW is active' and 'EgoVehicle_CurveRadius' < 'Cust_LCWCEgoVehicleCurveRadiusBSWActive_CFG'
Check if the function 'LcwFeatStM' is in state 'LCW_ACTIVE' it shall set 'Cust_LCWCSubStateInfo' to 'BSW not active'", 5, 1)
put(ArrObjectInfor0, "Check if 'Cust_LCWCSubStateInfo' is calculate correctly", 5, 2)
put(ArrObjectInfor0, "medium", 5, 3)
put(ArrObjectInfor0, "Test Case", 5, 4)
put(ArrObjectInfor0, "see test automation", 5, 5)
put(ArrObjectInfor0, "ComCore", 5, 6)
put(ArrObjectInfor0, "Debugger Test", 5, 7)
put(ArrObjectInfor0, "SWT_CC", 5, 8)
put(ArrObjectInfor0, "ready for review", 5, 9)
put(ArrObjectInfor0, 2289, 5, 10)
put(ArrObjectInfor0, 16085, 5, 11)
put(ArrObjectInfor0, "[16086]
If the function 'LcwFeatStM' is in state 'LCW_ACTIVE' it shall set 'Cust_LCWCSubStateInfo' to 'CVW active' (if it was set to 'CVW not active' before) if

'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusCVWActive_CFG'", 6, 0)
put(ArrObjectInfor0, "Case 1: Set 'CVW is not active' and 'EgoVehicle_CurveRadius' >= 'Cust_LCWCEgoVehicleCurveRadiusBSWActive_CFG'
Check if the function 'LcwFeatStM' is in state 'LCW_ACTIVE' it shall set 'Cust_LCWCSubStateInfo' to 'CVW active'", 6, 1)
put(ArrObjectInfor0, "Check if 'Cust_LCWCSubStateInfo' is calculate correctly", 6, 2)
put(ArrObjectInfor0, "medium", 6, 3)
put(ArrObjectInfor0, "Test Case", 6, 4)
put(ArrObjectInfor0, "see test automation", 6, 5)
put(ArrObjectInfor0, "ComCore", 6, 6)
put(ArrObjectInfor0, "Debugger Test", 6, 7)
put(ArrObjectInfor0, "SWT_CC", 6, 8)
put(ArrObjectInfor0, "ready for review", 6, 9)
put(ArrObjectInfor0, 2290, 6, 10)
put(ArrObjectInfor0, 16086, 6, 11)
put(ArrObjectInfor0, "[16087]
If the function 'LcwFeatStM' is in state 'LCW_ACTIVE' it shall set 'Cust_LCWCSubStateInfo' to 'CVW not active' (if it was set to 'CVW active' before) if

'EgoVehicle_CurveRadius' < 'Cust_LCWCEgoVehicleCurveRadiusCVWInactive_CFG'", 7, 0)
put(ArrObjectInfor0, "Case 1: Set 'CVW is active' and 'EgoVehicle_CurveRadius' < 'Cust_LCWCEgoVehicleCurveRadiusBSWActive_CFG'
Check if the function 'LcwFeatStM' is in state 'LCW_ACTIVE' it shall set 'Cust_LCWCSubStateInfo' to 'CVW not active'", 7, 1)
put(ArrObjectInfor0, "Check if 'Cust_LCWCSubStateInfo' is calculate correctly", 7, 2)
put(ArrObjectInfor0, "medium", 7, 3)
put(ArrObjectInfor0, "Test Case", 7, 4)
put(ArrObjectInfor0, "see test automation", 7, 5)
put(ArrObjectInfor0, "ComCore", 7, 6)
put(ArrObjectInfor0, "Debugger Test", 7, 7)
put(ArrObjectInfor0, "SWT_CC", 7, 8)
put(ArrObjectInfor0, "ready for review", 7, 9)
put(ArrObjectInfor0, 2291, 7, 10)
put(ArrObjectInfor0, 16087, 7, 11)
put(ArrObjectInfor0, "[16163]
The function 'LcwFeatStM' shall set 'Cust_LCWCSubStateInfo[bit2..bit4]' as follows: 
Cust_LCWCSubStateInfo[bit2] := 'IBSZ not active'
Cust_LCWCSubStateInfo[bit3] := 'ICVZ not active'
Cust_LCWCSubStateInfo[bit4] := 'US not active' 

Remark: IBSZ, ICVZ, US is not used in YEA project", 8, 0)
put(ArrObjectInfor0, "Case 1: Check if Cust_LCWCSubStateInfo[bit2] := 'IBSZ not active' AND Cust_LCWCSubStateInfo[bit3] := 'ICVZ not active AND 'Cust_LCWCSubStateInfo[bit4] := 'US not active'", 8, 1)
put(ArrObjectInfor0, "Check if function 'LcwFeatStM' is run correctly", 8, 2)
put(ArrObjectInfor0, "medium", 8, 3)
put(ArrObjectInfor0, "Test Case", 8, 4)
put(ArrObjectInfor0, "see test automation", 8, 5)
put(ArrObjectInfor0, "ComCore", 8, 6)
put(ArrObjectInfor0, "Debugger Test", 8, 7)
put(ArrObjectInfor0, "SWT_CC", 8, 8)
put(ArrObjectInfor0, "ready for review", 8, 9)
put(ArrObjectInfor0, 2292, 8, 10)
put(ArrObjectInfor0, 16163, 8, 11)
put(ArrObjectInfor0, "[16418]
Starting from the moment when 
(
all conditions for a left side blind spot warning ('LCW_BSZLeftWarning' == '1' and 'LCW_WarningModeLeft' == 'warning' ) are fulfilled 

OR 

all conditions for a left side closing vehicle warning ('LCW_CVZLeftWarning' == '1' and 'LCW_WarningModeLeft' == 'warning') are fulfilled 
) 

AND 

'EgoVehicle_TurnSignalStatusLeft' == 'On' 

the funtion 'LCW Warning Strategy' shall hold its output ('Cust_LCWCBrightnessRequestLeft' and 'Cust_LCWCBrightnessLeft') for a configurable minimum time ('Cust_LCWCBlinkerTriggeredWarningCyclesMin_CFG').", 9, 0)
put(ArrObjectInfor0, "Case 1: Set 'LCW_BSZLeftWarning' == '1' and 'LCW_WarningModeLeft' == 'warning' And  'EgoVehicle_TurnSignalStatusLeft' == 'On'
Check if the funtion 'LCW Warning Strategy' shall hold its output ('Cust_LCWCBrightnessRequestLeft' and 'Cust_LCWCBrightnessLeft') for a configurable minimum time ('Cust_LCWCBlinkerTriggeredWarningCyclesMin_CFG').

Case 2: Set 'LCW_CVZLeftWarning' == '1' and 'LCW_WarningModeLeft' == 'warning' And  'EgoVehicle_TurnSignalStatusLeft' == 'On'
Check if the funtion 'LCW Warning Strategy' shall hold its output ('Cust_LCWCBrightnessRequestLeft' and 'Cust_LCWCBrightnessLeft') for a configurable minimum time ('Cust_LCWCBlinkerTriggeredWarningCyclesMin_CFG').", 9, 1)
put(ArrObjectInfor0, "Check if funtion 'LCW Warning Strategy' is run correctly", 9, 2)
put(ArrObjectInfor0, "medium", 9, 3)
put(ArrObjectInfor0, "Test Case", 9, 4)
put(ArrObjectInfor0, "see test automation", 9, 5)
put(ArrObjectInfor0, "ComCore", 9, 6)
put(ArrObjectInfor0, "Debugger Test", 9, 7)
put(ArrObjectInfor0, "SWT_CC", 9, 8)
put(ArrObjectInfor0, "ready for review", 9, 9)
put(ArrObjectInfor0, 2293, 9, 10)
put(ArrObjectInfor0, 16418, 9, 11)
put(ArrObjectInfor0, "[16419]
Starting from the moment when 
(
all conditions for a right side blind spot warning ('LCW_BSZRightWarning' == '1' and 'LCW_WarningModeRight' == 'warning') are fulfilled 

OR 

all conditions for a right side closing vehicle warning ('LCW_CVZRightWarning' == '1' and 'LCW_WarningModeRight' == 'warning') are fulfilled
) 

AND 

'EgoVehicle_TurnSignalStatusRight' == 'On' 

the funtion 'LCW Warning Strategy' shall hold its output ('Cust_LCWCBrightnessRequestRight' and 'Cust_LCWCBrightnessRight') for a configurable minimum time ('Cust_LCWCBlinkerTriggeredWarningCyclesMin_CFG').", 10, 0)
put(ArrObjectInfor0, "Case 1: Set ''LCW_BSZRightWarning'' == '1' and ''LCW_WarningModeRight'' == 'warning' And  ''EgoVehicle_TurnSignalStatusRight'' == 'On'
Check if the funtion ''LCW Warning Strategy'' shall hold its output (''Cust_LCWCBrightnessRequestRight'' and ''Cust_LCWCBrightnessRight'') for a configurable minimum time (''Cust_LCWCBlinkerTriggeredWarningCyclesMin_CFG'').

Case 2: Set ''LCW_CVZRightWarning'' == '1' and ''LCW_WarningModeRight'' == 'warning' And  ''EgoVehicle_TurnSignalStatusRight'' == 'On'
Check if the funtion ''LCW Warning Strategy'' shall hold its output (''Cust_LCWCBrightnessRequestRight'' and ''Cust_LCWCBrightnessRight'') for a configurable minimum time (''Cust_LCWCBlinkerTriggeredWarningCyclesMin_CFG'').'", 10, 1)
put(ArrObjectInfor0, "Check if funtion 'LCW Warning Strategy' is run correctly", 10, 2)
put(ArrObjectInfor0, "medium", 10, 3)
put(ArrObjectInfor0, "Test Case", 10, 4)
put(ArrObjectInfor0, "see test automation", 10, 5)
put(ArrObjectInfor0, "ComCore", 10, 6)
put(ArrObjectInfor0, "Debugger Test", 10, 7)
put(ArrObjectInfor0, "SWT_CC", 10, 8)
put(ArrObjectInfor0, "ready for review", 10, 9)
put(ArrObjectInfor0, 2294, 10, 10)
put(ArrObjectInfor0, 16419, 10, 11)
put(ArrObjectInfor0, "[15949]
IF
'Cust_RTACAvailable_CFG' == 'available'
AND
'SysStM_StateInfo' == 'ACTIVE'
AND
'DTC_RTARelevantFailure' indicates no error
AND
'Cust_SystemFailureState' == 'No Failure'
THEN
'RtaRunCondition' = 'true'.
ELSE
'RtaRunCondition' = 'false'.", 11, 0)
put(ArrObjectInfor0, "Case 1:
Set 'Cust_RTACAvailable_CFG' == 'available'
AND 'SysStM_StateInfo' == 'ACTIVE'
AND 'DTC_RTARelevantFailure' indicates no error
AND 'Cust_SystemFailureState' == 'No Failure'
THEN'RtaRunCondition' = 'true'.

Case 2:
Set 'Cust_RTACAvailable_CFG' != 'available'
AND 'SysStM_StateInfo' == 'ACTIVE'
AND 'DTC_RTARelevantFailure' indicates no error
AND 'Cust_SystemFailureState' == 'No Failure'
THEN'RtaRunCondition' = 'false'.

Case 3:
Set 'Cust_RTACAvailable_CFG' == 'available'
AND 'SysStM_StateInfo' != 'ACTIVE'
AND 'DTC_RTARelevantFailure' indicates no error
AND 'Cust_SystemFailureState' == 'No Failure'
THEN'RtaRunCondition' = 'false'.

Case 4:
Set 'Cust_RTACAvailable_CFG' == 'available'
AND 'SysStM_StateInfo' == 'ACTIVE'
AND 'DTC_RTARelevantFailure' indicates error
AND 'Cust_SystemFailureState' == 'No Failure'
THEN'RtaRunCondition' = 'false'.

Case 5:
Set 'Cust_RTACAvailable_CFG' == 'available'
AND 'SysStM_StateInfo' == 'ACTIVE'
AND 'DTC_RTARelevantFailure' indicates no error
AND 'Cust_SystemFailureState' == 'Failure'
THEN'RtaRunCondition' = 'false'.", 11, 1)
put(ArrObjectInfor0, "Check if 'RtaRunCondition' is calculate correctly", 11, 2)
put(ArrObjectInfor0, "low", 11, 3)
put(ArrObjectInfor0, "Test Case", 11, 4)
put(ArrObjectInfor0, "see test automation", 11, 5)
put(ArrObjectInfor0, "ComCore", 11, 6)
put(ArrObjectInfor0, "Debugger Test", 11, 7)
put(ArrObjectInfor0, "SWT_CC", 11, 8)
put(ArrObjectInfor0, "ready for review", 11, 9)
put(ArrObjectInfor0, 2295, 11, 10)
put(ArrObjectInfor0, 15949, 11, 11)
put(ArrObjectInfor0, "[15950]
IF
'SysStM_StateInfo' != 'ACTIVE'
OR
'DTC_RTARelevantFailure' indicates RTA relevant error(s)
OR
'Cust_SystemFailureState' != 'No Failure'
THEN
'RtaOffEvent' = 'true'.
ELSE
'RtaOffEvent' = 'false'.", 12, 0)
put(ArrObjectInfor0, "Case 1:
Set  'SysStM_StateInfo' == 'ACTIVE'
AND 'DTC_RTARelevantFailure' indicates RTA relevant no error(s)
AND 'Cust_SystemFailureState' == 'No Failure'
Check if 'RtaOffEvent' = 'false'

Case 2:
Set  'SysStM_StateInfo' != 'ACTIVE'
AND 'DTC_RTARelevantFailure' indicates RTA relevant no error(s)
AND 'Cust_SystemFailureState' == 'No Failure'
Check if 'RtaOffEvent' = 'true'

Case 3:
Set  'SysStM_StateInfo' == 'ACTIVE'
AND 'DTC_RTARelevantFailure' indicates RTA relevant error(s)
AND 'Cust_SystemFailureState' == 'No Failure'
Check if 'RtaOffEvent' = 'true'

Case 4:
Set  'SysStM_StateInfo' == 'ACTIVE'
AND 'DTC_RTARelevantFailure' indicates RTA relevant no error(s)
AND 'Cust_SystemFailureState' == 'Failure'
Check if 'RtaOffEvent' = 'true'", 12, 1)
put(ArrObjectInfor0, "Check if 'RtaOffEvent' is calculate correctly", 12, 2)
put(ArrObjectInfor0, "low", 12, 3)
put(ArrObjectInfor0, "Test Case", 12, 4)
put(ArrObjectInfor0, "see test automation", 12, 5)
put(ArrObjectInfor0, "ComCore", 12, 6)
put(ArrObjectInfor0, "Debugger Test", 12, 7)
put(ArrObjectInfor0, "SWT_CC", 12, 8)
put(ArrObjectInfor0, "ready for review", 12, 9)
put(ArrObjectInfor0, 2296, 12, 10)
put(ArrObjectInfor0, 15950, 12, 11)
put(ArrObjectInfor0, "[16027]
If warning output 'B' in 
'RTA_OutputLeft' AND
'RTA_OutputRight'
is not activated the function 'RTA Warning strategy' shall
set 'Cust_RTACBrightnessLeft' to '0' and  
set 'Cust_RTACBrightnessRight' to '0' and 
set 'Cust_RTACBrightnessRequestLeft' to 'Off' and
set 'Cust_RTACBrightnessRequestRight' to 'Off'.

Remark: 'RtaOpticalOutputEnable' shall not be considered as precondition for this requirement", 13, 0)
put(ArrObjectInfor0, "Case 1:
Set warning output 'B' in 'RTA_OutputLeft' AND'RTA_OutputRight'is not activated
Check if the function 'RTA Warning strategy' shallset 'Cust_RTACBrightnessLeft' to '0' and  set 'Cust_RTACBrightnessRight' to '0' and set 'Cust_RTACBrightnessRequestLeft' to 'Off' and set 'Cust_RTACBrightnessRequestRight' to 'Off'", 13, 1)
put(ArrObjectInfor0, "Check if 'RTA Warning strategy' is run correctly", 13, 2)
put(ArrObjectInfor0, "medium", 13, 3)
put(ArrObjectInfor0, "Test Case", 13, 4)
put(ArrObjectInfor0, "see test automation", 13, 5)
put(ArrObjectInfor0, "ComCore", 13, 6)
put(ArrObjectInfor0, "Debugger Test", 13, 7)
put(ArrObjectInfor0, "SWT_CC", 13, 8)
put(ArrObjectInfor0, "ready for review", 13, 9)
put(ArrObjectInfor0, 2297, 13, 10)
put(ArrObjectInfor0, 16027, 13, 11)
put(ArrObjectInfor0, "[16028]
The function 'RTA Warning strategy' shall «do the following: 

'Cust_RTACBrightnessRequestLeft' shall be set to 'On'

AND

'Cust_RTACBrightnessRequestRight' shall be set to 'On'

AND 

'Cust_RTACBrightnessLeft' shall be set to a brightness value as definded in 'Cust_RTACLEDBrightness_CFG' for a time of 'Cust_RTACLEDOnTime_CFG', then it shall be set to '0' for a time of 'Cust_RTACLEDOffTime_CFG'

AND

'Cust_RTACBrightnessRight' shall be set to a brightness value as definded in 'Cust_RTACLEDBrightness_CFG' for a time of 'Cust_RTACLEDOnTime_CFG', then it shall be set to '0' for a time of 'Cust_RTACLEDOffTime_CFG'


as long as these conditions are fulfilled: 
warning output 'B' is activated in 'RTA_OutputLeft' or 'RTA_OutputRight'
AND 
'EgoVehicle_GearInfo' == 'reverse'
AND
'EgoVehicle_Velocity' <= 0 kph

The above described behaviour shall be repeated as long as the conditions are fulfilled

Remark: 'RtaOpticalOutputEnable' shall not be considered as precondition for this requirement
».", 14, 0)
put(ArrObjectInfor0, "
Case 1:
Set  warning output 'B' is activated in 'RTA_OutputLeft' 
AND 
'EgoVehicle_GearInfo' == 'reverse'
AND
'EgoVehicle_Velocity' <= 0 kph
Check if 'Cust_RTACBrightnessRequestLeft' shall be set to 'On'
AND
'Cust_RTACBrightnessRequestRight' shall be set to 'On'
AND 
'Cust_RTACBrightnessLeft' shall be set to a brightness value as definded in 'Cust_RTACLEDBrightness_CFG' for a time of 'Cust_RTACLEDOnTime_CFG', then it shall be set to '0' for a time of 'Cust_RTACLEDOffTime_CFG'
AND
'Cust_RTACBrightnessRight' shall be set to a brightness value as definded in 'Cust_RTACLEDBrightness_CFG' for a time of 'Cust_RTACLEDOnTime_CFG', then it shall be set to '0' for a time of 'Cust_RTACLEDOffTime_CFG'

Case 2:
Set  warning output 'B' is activated in 'RTA_OutputRight' 
AND 
'EgoVehicle_GearInfo' == 'reverse'
AND
'EgoVehicle_Velocity' <= 0 kph
Check if 'Cust_RTACBrightnessRequestLeft' shall be set to 'On'
AND
'Cust_RTACBrightnessRequestRight' shall be set to 'On'
AND 
'Cust_RTACBrightnessLeft' shall be set to a brightness value as definded in 'Cust_RTACLEDBrightness_CFG' for a time of 'Cust_RTACLEDOnTime_CFG', then it shall be set to '0' for a time of 'Cust_RTACLEDOffTime_CFG'
AND
'Cust_RTACBrightnessRight' shall be set to a brightness value as definded in 'Cust_RTACLEDBrightness_CFG' for a time of 'Cust_RTACLEDOnTime_CFG', then it shall be set to '0' for a time of 'Cust_RTACLEDOffTime_CFG'", 14, 1)
put(ArrObjectInfor0, "Check if 'RTA Warning strategy' is run correctly", 14, 2)
put(ArrObjectInfor0, "medium", 14, 3)
put(ArrObjectInfor0, "Test Case", 14, 4)
put(ArrObjectInfor0, "see test automation", 14, 5)
put(ArrObjectInfor0, "ComCore", 14, 6)
put(ArrObjectInfor0, "Debugger Test", 14, 7)
put(ArrObjectInfor0, "SWT_CC", 14, 8)
put(ArrObjectInfor0, "ready for review", 14, 9)
put(ArrObjectInfor0, 2298, 14, 10)
put(ArrObjectInfor0, 16028, 14, 11)
put(ArrObjectInfor0, "[16219]
The function 'BuzzerInfo Customizing Function' shall «initialize 'BzrRqst_BSW' as follows:
'BzrRqst_BSW[Initial]' := 'No Request'
».", 15, 0)
put(ArrObjectInfor0, "Case 1: Reset the software and check if 'BzrRqst_BSW[Initial]' := 'No Request'».", 15, 1)
put(ArrObjectInfor0, "Check if 'BuzzerInfo Customizing Function' is run correctly", 15, 2)
put(ArrObjectInfor0, "medium", 15, 3)
put(ArrObjectInfor0, "Test Case", 15, 4)
put(ArrObjectInfor0, "see test automation", 15, 5)
put(ArrObjectInfor0, "ComCore", 15, 6)
put(ArrObjectInfor0, "Debugger Test", 15, 7)
put(ArrObjectInfor0, "SWT_CC", 15, 8)
put(ArrObjectInfor0, "ready for review", 15, 9)
put(ArrObjectInfor0, 2299, 15, 10)
put(ArrObjectInfor0, 16219, 15, 11)
put(ArrObjectInfor0, "[16209]
The function 'RTAInfo Customizing Function' shall « initilize 'MDI_RCTA_Wrn_L' and 'MDI_RCTA_Wrn_R' as follows: 
'MDI_RCTA_Wrn_L[Initial]' := 'No Request'
'MDI_RCTA_Wrn_R[Initial]' := 'No Request'
».", 16, 0)
put(ArrObjectInfor0, "Case 1: Reset the software and check if 'MDI_RCTA_Wrn_L[Initial]' := 'No Request'' And MDI_RCTA_Wrn_R[Initial]' := 'No Request'».", 16, 1)
put(ArrObjectInfor0, "Check if 'RTAInfo Customizing Function' is run correctly", 16, 2)
put(ArrObjectInfor0, "medium", 16, 3)
put(ArrObjectInfor0, "Test Case", 16, 4)
put(ArrObjectInfor0, "see test automation", 16, 5)
put(ArrObjectInfor0, "ComCore", 16, 6)
put(ArrObjectInfor0, "Debugger Test", 16, 7)
put(ArrObjectInfor0, "SWT_CC", 16, 8)
put(ArrObjectInfor0, "ready for review", 16, 9)
put(ArrObjectInfor0, 2300, 16, 10)
put(ArrObjectInfor0, 16209, 16, 11)
put(ArrObjectInfor0, "[16210]
The function 'RTAInfo Customizing Function' shall « set multi-display information for RTCA Warning Request Left as follows:
IF 
'Cust_RTACWarnLevelLeft[Bit2] == ''warning output 'B' active' 
THEN
'MDI_RCTA_Wrn_L' := 'Request'
ELSE
'MDI_RCTA_Wrn_L' := 'No Request'


».", 17, 0)
put(ArrObjectInfor0, "Case 1: Set 'Cust_RTACWarnLevelLeft[Bit2] == ''warning output 'B' active'
Check if 'MDI_RCTA_Wrn_L' := 'Request'

Case 2: Set 'Cust_RTACWarnLevelLeft[Bit2] != ''warning output 'B' active'
Check if 'MDI_RCTA_Wrn_L' := 'No Request'", 17, 1)
put(ArrObjectInfor0, "Check if 'MDI_RCTA_Wrn_L' is calculate correctly", 17, 2)
put(ArrObjectInfor0, "medium", 17, 3)
put(ArrObjectInfor0, "Test Case", 17, 4)
put(ArrObjectInfor0, "see test automation", 17, 5)
put(ArrObjectInfor0, "ComCore", 17, 6)
put(ArrObjectInfor0, "Debugger Test", 17, 7)
put(ArrObjectInfor0, "SWT_CC", 17, 8)
put(ArrObjectInfor0, "ready for review", 17, 9)
put(ArrObjectInfor0, 2301, 17, 10)
put(ArrObjectInfor0, 16210, 17, 11)
put(ArrObjectInfor0, "[16211]
The function 'RTAInfo Customizing Function' shall « set multi-display information for RTCA Warning Request Right as follows:IF 'Cust_RTACWarnLevelRight[Bit2] == ''warning output 'B' active' THEN'MDI_RCTA_Wrn_R' := 'Request'ELSE'MDI_RCTA_Wrn_R' := 'No Request'».", 18, 0)
put(ArrObjectInfor0, "Case 1: Set 'Cust_RTACWarnLevelRight[Bit2] == ''warning output 'B' active'
Check if 'MDI_RCTA_Wrn_R' := 'Request'

Case 2: Set 'Cust_RTACWarnLevelRight[Bit2] != ''warning output 'B' active'
Check if 'MDI_RCTA_Wrn_R' := 'No Request'", 18, 1)
put(ArrObjectInfor0, "Check if 'MDI_RCTA_Wrn_R' is calculate correctly", 18, 2)
put(ArrObjectInfor0, "medium", 18, 3)
put(ArrObjectInfor0, "Test Case", 18, 4)
put(ArrObjectInfor0, "see test automation", 18, 5)
put(ArrObjectInfor0, "ComCore", 18, 6)
put(ArrObjectInfor0, "Debugger Test", 18, 7)
put(ArrObjectInfor0, "SWT_CC", 18, 8)
put(ArrObjectInfor0, "ready for review", 18, 9)
put(ArrObjectInfor0, 2302, 18, 10)
put(ArrObjectInfor0, 16211, 18, 11)
for (loop = 0; loop<19; loop++)
{
    bool IsErrorOccured = false

	CurrTestCaseAbsID = (int get(ArrObjectInfor0,loop,10))
	Object currOject = object(CurrTestCaseAbsID)
    if ((!null currOject) and (loop == 0))
    {
        //do nothing --> this object is the first one created by tester
    }
    else if ((null currOject) and (loop != 0))
    {

        //create new object here
        PreviousTestCaseAbsID = (int get(ArrObjectInfor0,loop-1,10))
        Object PreviousObject = object(PreviousTestCaseAbsID)
        if (!null PreviousObject)
        {
            currOject = create PreviousObject //Create new object below with same level
        }
        else
        {
            print "ERROR: Test case "  PreviousTestCaseAbsID " is not exist"
            IsErrorOccured = true
            break
        }

    }
    else
    {
        IsErrorOccured = true
        print "ERROR: Test case "  CurrTestCaseAbsID " is exist"
        break
        //Error--> Stop updating
    }

	if((!null currOject) and (IsErrorOccured == false))
	{

            //Update Test case attributes

            currOject.Object_Text		  = (string get(ArrObjectInfor0,loop,0))
            currOject.TS_Test_Description = (string get(ArrObjectInfor0,loop,1))
            currOject.TS_Test_Goal		  = (string get(ArrObjectInfor0,loop,2))
            currOject.TS_Test_Priority	  = (string get(ArrObjectInfor0,loop,3))
            currOject.TS_Object_Type	  = (string get(ArrObjectInfor0,loop,4))
            currOject.TS_Expected_Result  = (string get(ArrObjectInfor0,loop,5))
            currOject.TS_SwArchitectureDesign = (string get(ArrObjectInfor0,loop,6))
            currOject.TS_Test_Enviroment  = (string get(ArrObjectInfor0,loop,7))
            currOject.TS_TestLocation_TC  = (string get(ArrObjectInfor0,loop,8))
            currOject.TS_Test_Case_Status = (string get(ArrObjectInfor0,loop,9))


            //NumberTCUpdated = NumberTCUpdated +1
            print "Completed Test Case " CurrTestCaseAbsID "\n"

	}
	else
	{
        IsErrorOccured = true
		print CurrTestCaseAbsID " is null or Object Type is not Test Case\n"
        break
	}

}

//Update LinkModule
Module targetRequirementModule = null
if (IsErrorOccured == false)
{


    for (loop = 0; loop<19; loop++)
    {
        m0 = edit(currMod, true)
        CurrTestCaseAbsID = (int get(ArrObjectInfor0,loop,10))
    	Object currOject = object(CurrTestCaseAbsID)

        //Link link
        //for link in currOject -> "*" do {
        //    delete(link)
        //}
        targetRequirementModule = read(pathToRequirement)
        filtering off
        ReqID = (int get(ArrObjectInfor0,loop,11))
        Object RequirementObject = object(ReqID)


        if ((!null RequirementObject) and (!null currOject))
         {
            currOject -> pathToLinkModule -> RequirementObject
         }
         else
         {
            print "LINK ERROR: Test case " CurrTestCaseAbsID " to " ReqID
            IsErrorOccured = true
            break
         }

    }
}
close(targetRequirementModule)
//print "Requested: " NumberTCRequested " test cases -- Updated: " NumberTCUpdated " test cases 

